as.data.frame.SeqAcnucWeb(x, ...) {
NULL
}
as.data.frame.SeqAcnucWeb <- function(x, ...) {
NULL
}
debugonce(as.data.frame.SeqAcnucWeb)
as.data.frame(x$req)
x
as.data.frame.SeqAcnucWeb <- function(x, ...) {
x
}
as.data.frame(x$req)
rm(as.data.frame.SeqAcnucWeb)
as.data.frame(x$req)
debugonce(as.data.frame.SeqAcnucWeb)
as.data.frame.SeqAcnucWeb <- function(x, ...) {
x
}
debugonce(as.data.frame.SeqAcnucWeb)
as.data.frame(x$req)
x
str(x)
as.list(x)
?attributes
attributes(x)
attr(x)
attributes(x)
c(name=x$name, attributes(x))
c(name=name(x), attributes(x))
c(name=names(x), attributes(x))
c(name=x, attributes(x))
x
c(name=x, attributes(x))
tr(c(name=x, attributes(x)))
tr(c(name=x, attributes(x)))
str(c(name=x, attributes(x)))
c(name=x, attributes(x))
as.data.frame.SeqAcnucWeb <- function(x, ...) {
c(name=x, attributes(x))
}
as.data.frame(x$req)
as.data.frame.SeqAcnucWeb <- function(x, ...) {
unlist(c(name=x, attributes(x)))
}
as.data.frame(x$req)
?as.data.frame.list
library(metacoder)
?as.data.frame.qaw
as.data.frame(x$req)
as.data.frame()
as.data.frame(x)
library(metacoder)
library(metacoder)
x <- query_taxon(c("Phytophthora", "Pythium"), key=c("@18S@"), type="RRNA")
choosebank("genbank")
x <- query_taxon(c("Phytophthora", "Pythium"), key=c("@18S@"), type="RRNA")
x
library(metacoder)
x <- query_taxon(c("Phytophthora", "Pythium"), key=c("@18S@"), type="RRNA")
choosebank("genbank")
x <- query_taxon(c("Phytophthora", "Pythium"), key=c("@18S@"), type="RRNA")
x
x <- query_taxon(c("Phytophthora", "Pythium"), key=c("@18S@", "@28S@"))
x\
x
as.data.fram(x)
as.data.frame(x)
x <- query_taxon(c("Phytophthora", "Pythium"))
x
x <- query_taxon(c("Phytophthora"))
library(metacoder)
library(metacoder)
x <- query_taxon(c("Phytophthora"))
choosebank("genbank")
x <- query_taxon(c("Phytophthora"))
x
library(metacoder)
choosebank("genbank")
x <- query_taxon(c("Phytophthora"))
x
library(metacoder)
choosebank("genbank")
x <- query_taxon(c("Phytophthora"))
x
x <- query_taxon(c("Phytophthora"), parent=T)
x
library(taxize)
?col_downstream
?taxize
x = col_search("oomycota")
x
col_children(id=18220249)
col_children(id=18220250)
col_children(18220250)
col_search(id=18220250)
classification(id=18220250, db="col")
get_eolid("Oomycota")
get_colid("Oomycota")
classification(id=18220250, db="col")
classification("Oomycota", id=18220250, db="col")
?classification
classification(get_colid("Oomycota"))
get_colid("Oomycotadvvsv")
get_colid("Oomycotadvvsv")[1]
get_colid("Oomycota")
is.na(get_colid("Oomycot3343tt3a"))
get_colid("Pythium")
col_children(id=18220249)
col_search(id=18220249)
as.colid
classification.colid(18220249)
classification.colid(id=18220249)
x <- 18220249
x <- "18220249"
attr(x, "class") <- "colid"
x
classification(x)
classification(x)[[1]]$name
y <- classification(x)[[1]]$name
gnr_resolve(y, data_source_ids=4)
gnr_resolve(y, data_source_ids=5)
gnr_resolve(y, data_source_ids=3)
gnr_resolve(y, data_source_ids=4)
taxon_name <- col_search(18220250)[[1]]$name
taxon_name
taxon_name <- col_search("18220250")[[1]]$name
taxon_name
taxon_name <- col_search("18220250")
taxon_name
taxon_name <- col_search(id = "18220250")
taxon_name
taxon_name <- col_search(id = "18220250")[[1]]$name
taxon_name
results <- query_taxon(taxon_name)
get_ids(names="Chironomus riparius", db =
'
ncbi
'
)
get_ids(names="Chironomus riparius", db = 'ncbi')
results <- query_taxon("Pythium")
c
<-0 ncbi_search("Pythium")
x <- ncbi_search("Pythium")
x
head(x)
result <- get_uid("Pythium")
result
classification(result, db = 'ncbi')
children("Salmo", db = "ncbi")
children("Salmo", db = "col")
col_children
?col_children
result
classification(result, db = 'ncbi')
paste0("sdfs", NULL, "123")
as.logical(NULL)
?getURL
library(RCurl)
?getURL
?xmlTreeParse
library(XML)
library(xml)
?xmlTreeParse
ncbi_children_uid <- function(name = NULL, id = NULL, start = 0, max_return = 1000, parent = NULL) {
# Argument validation ----------------------------------------------------------------------------
if (sum(c(is.null(name), is.null(id))) != 1) {
stop("Either name or id must be speficied, but not both")
}
# Get name from id -------------------------------------------------------------------------------
if (is.null(name)) {
if (attr(id, 'class') != 'uid') attr(id, 'class') <- 'uid'
id_taxonomy <- classification(result, db = 'ncbi')[[1]]
name <- id_taxonomy$name[nrow(id_taxonomy)]
if (nrow(id_taxonomy) > 1) parent = id_taxonomy$name[nrow(id_taxonomy) - 1]
}
# Make eutils esearch query ----------------------------------------------------------------------
base_url <- "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=taxonomy"
if (is.null(parent)) {
parent_query <- NULL
} else {
parent_query <- paste0("+AND+", parent, "[subtree]")
}
taxon_query <- paste0("term=", name, "[Next+Level]", parent_query)
max_return_query <- paste0("RetMax=", max_return)
start_query <- paste0("RetStart=", start)
query <- paste(base_url, taxon_query, max_return_query, start_query, sep="&")
# Search ncbi for children -----------------------------------------------------------------------
raw_results <- RCurl::getURL(query)
# Parse results ----------------------------------------------------------------------------------
results <- XML::xmlTreeParse(raw_results, useInternalNodes = TRUE)
children_uid <- xpathSApply(ttp, "//eSearchResult/IdList/Id", xmlValue)
return(children_uid)
}
ncbi_children_uid(name="Satyrium", parent="Eumaeini")
ncbi_children_uid <- function(name = NULL, id = NULL, start = 0, max_return = 1000, parent = NULL) {
# Argument validation ----------------------------------------------------------------------------
if (sum(c(is.null(name), is.null(id))) != 1) {
stop("Either name or id must be speficied, but not both")
}
# Get name from id -------------------------------------------------------------------------------
if (is.null(name)) {
if (attr(id, 'class') != 'uid') attr(id, 'class') <- 'uid'
id_taxonomy <- classification(result, db = 'ncbi')[[1]]
name <- id_taxonomy$name[nrow(id_taxonomy)]
if (nrow(id_taxonomy) > 1) parent = id_taxonomy$name[nrow(id_taxonomy) - 1]
}
# Make eutils esearch query ----------------------------------------------------------------------
base_url <- "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=taxonomy"
if (is.null(parent)) {
parent_query <- NULL
} else {
parent_query <- paste0("+AND+", parent, "[subtree]")
}
taxon_query <- paste0("term=", name, "[Next+Level]", parent_query)
max_return_query <- paste0("RetMax=", max_return)
start_query <- paste0("RetStart=", start)
query <- paste(base_url, taxon_query, max_return_query, start_query, sep="&")
# Search ncbi for children -----------------------------------------------------------------------
raw_results <- RCurl::getURL(query)
# Parse results ----------------------------------------------------------------------------------
results <- XML::xmlTreeParse(raw_results, useInternalNodes = TRUE)
children_uid <- xpathSApply(results, "//eSearchResult/IdList/Id", xmlValue)
return(children_uid)
}
ncbi_children_uid(name="Satyrium", parent="Eumaeini")
ncbi_children_uid(name="Satyrium")
ncbi_children_uid(id="1430660")
attr(x, "class")
attr(NULL, "class")
class(NULL)
ncbi_children_uid <- function(name = NULL, id = NULL, start = 0, max_return = 1000, parent = NULL) {
# Argument validation ----------------------------------------------------------------------------
if (sum(c(is.null(name), is.null(id))) != 1) {
stop("Either name or id must be speficied, but not both")
}
# Get name from id -------------------------------------------------------------------------------
if (is.null(name)) {
if (class(id) != 'uid') attr(id, 'class') <- 'uid'
id_taxonomy <- classification(result, db = 'ncbi')[[1]]
name <- id_taxonomy$name[nrow(id_taxonomy)]
if (nrow(id_taxonomy) > 1) parent = id_taxonomy$name[nrow(id_taxonomy) - 1]
}
# Make eutils esearch query ----------------------------------------------------------------------
base_url <- "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=taxonomy"
if (is.null(parent)) {
parent_query <- NULL
} else {
parent_query <- paste0("+AND+", parent, "[subtree]")
}
taxon_query <- paste0("term=", name, "[Next+Level]", parent_query)
max_return_query <- paste0("RetMax=", max_return)
start_query <- paste0("RetStart=", start)
query <- paste(base_url, taxon_query, max_return_query, start_query, sep="&")
# Search ncbi for children -----------------------------------------------------------------------
raw_results <- RCurl::getURL(query)
# Parse results ----------------------------------------------------------------------------------
results <- XML::xmlTreeParse(raw_results, useInternalNodes = TRUE)
children_uid <- xpathSApply(results, "//eSearchResult/IdList/Id", xmlValue)
return(children_uid)
}
ncbi_children_uid(id="1430660")
ncbi_children_uid(id="266948")
debugonce(ncbi_children_uid)
ncbi_children_uid(id="266948")
class(id)
class(id)
class(id)
id_taxonomy
Q
ncbi_children_uid <- function(name = NULL, id = NULL, start = 0, max_return = 1000, parent = NULL) {
# Argument validation ----------------------------------------------------------------------------
if (sum(c(is.null(name), is.null(id))) != 1) {
stop("Either name or id must be speficied, but not both")
}
# Get name from id -------------------------------------------------------------------------------
if (is.null(name)) {
if (class(id) != 'uid') attr(id, 'class') <- 'uid'
id_taxonomy <- classification(id, db = 'ncbi')[[1]]
name <- id_taxonomy$name[nrow(id_taxonomy)]
if (nrow(id_taxonomy) > 1) parent = id_taxonomy$name[nrow(id_taxonomy) - 1]
}
# Make eutils esearch query ----------------------------------------------------------------------
base_url <- "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=taxonomy"
if (is.null(parent)) {
parent_query <- NULL
} else {
parent_query <- paste0("+AND+", parent, "[subtree]")
}
taxon_query <- paste0("term=", name, "[Next+Level]", parent_query)
max_return_query <- paste0("RetMax=", max_return)
start_query <- paste0("RetStart=", start)
query <- paste(base_url, taxon_query, max_return_query, start_query, sep="&")
# Search ncbi for children -----------------------------------------------------------------------
raw_results <- RCurl::getURL(query)
# Parse results ----------------------------------------------------------------------------------
results <- XML::xmlTreeParse(raw_results, useInternalNodes = TRUE)
children_uid <- xpathSApply(results, "//eSearchResult/IdList/Id", xmlValue)
return(children_uid)
}
ncbi_children_uid(id="266948")
ncbi_children_uid(name="Satyrium", parent="Eumaeini")
ncbi_children_uid(name="Satyrium", parent="Orchidaceae")
ncbi_children_uid(name="Satyrium")
?last
ncbi_children_uid <- function(name = NULL, id = NULL, start = 0, max_return = 1000, parent = NULL) {
# Argument validation ----------------------------------------------------------------------------
if (sum(c(is.null(name), is.null(id))) != 1) {
stop("Either name or id must be speficied, but not both")
}
# Get name from id -------------------------------------------------------------------------------
if (is.null(name)) {
if (class(id) != 'uid') attr(id, 'class') <- 'uid'
id_taxonomy <- classification(id, db = 'ncbi')
name <- vapply(id_taxonomy, function(x) x$name[nrow(x)], character(1))
parent <- vapply(id_taxonomy,
function(x) ifelse(nrow(x) > 1, x$name[nrow(x) - 1], NULL),
character(1))
}
single_search <- function(name, parent) {
# Make eutils esearch query ----------------------------------------------------------------------
base_url <- "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=taxonomy"
if (is.null(parent)) {
parent_query <- NULL
} else {
parent_query <- paste0("+AND+", parent, "[subtree]")
}
taxon_query <- paste0("term=", name, "[Next+Level]", parent_query)
max_return_query <- paste0("RetMax=", max_return)
start_query <- paste0("RetStart=", start)
query <- paste(base_url, taxon_query, max_return_query, start_query, sep="&")
# Search ncbi for children -----------------------------------------------------------------------
raw_results <- RCurl::getURL(query)
# Parse results ----------------------------------------------------------------------------------
results <- XML::xmlTreeParse(raw_results, useInternalNodes = TRUE)
children_uid <- xpathSApply(results, "//eSearchResult/IdList/Id", xmlValue)
Sys.sleep(0.34) # NCBI limits requests to three per second
return(children_uid)
}
output <- Map(single_search, name, parent)
if (is.null(id)) names(output) <- name else names(output) <- id
return(output)
}
ncbi_children_uid(name="Satyrium")
rep(NULL, 2)
sapply(1:10, function(x) ifelse(c > 20, 1, NULL))
sapply(1:10, function(x) ifelse(x > 20, 1, NULL))
ncbi_children_uid <- function(name = NULL, id = NULL, start = 0, max_return = 1000, parent = NULL) {
# Argument validation ----------------------------------------------------------------------------
if (sum(c(is.null(name), is.null(id))) != 1) {
stop("Either name or id must be speficied, but not both")
}
# Get name from id -------------------------------------------------------------------------------
if (is.null(name)) {
if (class(id) != 'uid') attr(id, 'class') <- 'uid'
id_taxonomy <- classification(id, db = 'ncbi')
name <- vapply(id_taxonomy, function(x) x$name[nrow(x)], character(1))
parent <- vapply(id_taxonomy,
function(x) ifelse(nrow(x) > 1, x$name[nrow(x) - 1], NA),
character(1))
} else if (is.null(parent)) {
parent <- rep(NA, length(name))
}
single_search <- function(name, parent) {
# Make eutils esearch query ----------------------------------------------------------------------
base_url <- "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=taxonomy"
if (is.na(parent)) {
parent_query <- NULL
} else {
parent_query <- paste0("+AND+", parent, "[subtree]")
}
taxon_query <- paste0("term=", name, "[Next+Level]", parent_query)
max_return_query <- paste0("RetMax=", max_return)
start_query <- paste0("RetStart=", start)
query <- paste(base_url, taxon_query, max_return_query, start_query, sep="&")
# Search ncbi for children -----------------------------------------------------------------------
raw_results <- RCurl::getURL(query)
# Parse results ----------------------------------------------------------------------------------
results <- XML::xmlTreeParse(raw_results, useInternalNodes = TRUE)
children_uid <- xpathSApply(results, "//eSearchResult/IdList/Id", xmlValue)
Sys.sleep(0.34) # NCBI limits requests to three per second
return(children_uid)
}
output <- Map(single_search, name, parent)
if (is.null(id)) names(output) <- name else names(output) <- id
return(output)
}
ncbi_children_uid(name="Satyrium")
ncbi_children_uid(id="266948")
ncbi_children_uid(name=c("Satyrium", "fungi"))
?col_children
?children
#' Search NCBI for children of a taxon
#'
#' Search the NCBI Taxonomy database for uids of children of taxa. Taxa can be referenced by name
#' or uid. Referencing by name is faster.
#'
#' In a few cases, different taxa have the same name (e.g. Satyrium; see examples). If one of these
#' are searched for then the children of both taxa will be returned. This can be avoided by
#' using a uid instead of the name or specifying an ancestor. If an ancestor is provided, only
#' children of both the taxon and its ancestor are returned. This will only fail if there are two
#' taxa with the same name and the same specified ancestor.
#'
#' @param name (\code{character}) The string to search for. Only exact matches found the name given
#' will be returned. Not compatible with \code{id}.
#' @param id (\code{character}) The uid to search for. Not compatible with \code{name}.
#' @param start The first record to return. If omitted, the results are returned from the first
#'   record (start=0).
#' @param max_return (\code{numeric; length=1}) The maximum number of children to return.
#' @param ancestor (\code{character}) The ancestor of the taxon being searched for. This is useful
#'   if there could be more than one taxon with the same name. Has no effect if \code{id} is used.
#' @param out_type (character) Currently either \code{"summary"} or \code{"uid"}:
#'   \describe{
#'     \item{summary}{The output is a list of \code{data.frame} with children uid, name, and rank.}
#'     \item{uid}{A list of character vectors of children uids}
#'   }
#' @return The output type depends on the value of the \code{out_type} parameter.
#' @seealso \code{\link{ncbi_get_taxon_summary}}, \code{\link[taxize]{children}}
#' @examples
#' ncbi_children(name="Satyrium") #Satyrium is the name of two different genera
#' ncbi_children(name="Satyrium", ancestor="Eumaeini") # A genus of butterflies
#' ncbi_children(name="Satyrium", ancestor="Orchidaceae") # A genus of orchids
#' ncbi_children(id="266948") #"266948" is the uid for the butterfly genus
#' ncbi_children(id="62858") #"62858" is the uid for the orchid genus
#' @export
ncbi_children <- function(name = NULL, id = NULL, start = 0, max_return = 1000,
ancestor = NULL, out_type = c("summary", "uid")) {
# Argument validation ----------------------------------------------------------------------------
if (sum(c(is.null(name), is.null(id))) != 1) {
stop("Either name or id must be speficied, but not both")
}
out_type <- match.arg(out_type)
# Get name from id -------------------------------------------------------------------------------
if (is.null(name)) {
if (class(id) != 'uid') attr(id, 'class') <- 'uid'
id_taxonomy <- classification(id, db = 'ncbi')
name <- vapply(id_taxonomy, function(x) x$name[nrow(x)], character(1))
ancestor <- vapply(id_taxonomy,
function(x) ifelse(nrow(x) > 1, x$name[nrow(x) - 1], NA),
character(1))
} else if (is.null(ancestor)) {
ancestor <- rep(NA, length(name))
}
single_search <- function(name, ancestor) {
# Make eutils esearch query --------------------------------------------------------------------
base_url <- "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=taxonomy"
if (is.na(ancestor)) {
ancestor_query <- NULL
} else {
ancestor_query <- paste0("+AND+", ancestor, "[subtree]")
}
taxon_query <- paste0("term=", name, "[Next+Level]", ancestor_query)
max_return_query <- paste0("RetMax=", max_return)
start_query <- paste0("RetStart=", start)
query <- paste(base_url, taxon_query, max_return_query, start_query, sep="&")
# Search ncbi for children ---------------------------------------------------------------------
raw_results <- RCurl::getURL(query)
# Parse results --------------------------------------------------------------------------------
results <- XML::xmlTreeParse(raw_results, useInternalNodes = TRUE)
children_uid <- XML::xpathSApply(results, "//eSearchResult/IdList/Id", XML::xmlValue)
Sys.sleep(0.34) # NCBI limits requests to three per second
return(children_uid)
}
#Combine the result of multiple searches ----------------------------------------------------------
output <- Map(single_search, name, ancestor)
if (out_type == "summary") {
output <- lapply(output, ncbi_get_taxon_summary)
output <- Map(setNames, output, list(c("childtaxa_id", "childtaxa_name", "childtaxa_rank")))
}
if (is.null(id)) names(output) <- name else names(output) <- id
return(output)
}
#' NCBI taxon information from uids
#'
#' Downloads summary taxon information from the NCBI taxonomy databases for a set of taxonomy uids
#' using eutils esummary.
#'
#' @param id (character) NCBI taxonomy uids to retrieve information for.
#' @return A \code{data.frame} with the following rows:
#'   \describe{
#'     \item{uid}{The uid queried for}
#'     \item{name}{The name of the taxon; a binomial name if the taxon is of rank species}
#'     \item{rank}{The taxonomic rank (e.g. 'Genus')}
#'   }
#' @examples
#' \dontrun{
#' ncbi_get_taxon_summary(c(1430660, 4751))}
#' @export
ncbi_get_taxon_summary <- function(id) {
# Argument validation ----------------------------------------------------------------------------
if (length(id) <= 1 && is.na(id)) return(NA)
if (is.null(id)) return(NULL)
id <- as.character(id)
# Make eutils esummary query ---------------------------------------------------------------------
base_url <- "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=taxonomy"
query <- paste0(base_url, "&id=", paste(id, collapse = "+"))
# Search ncbi taxonomy for uid -------------------------------------------------------------------
raw_results <- RCurl::getURL(query)
# Parse results ----------------------------------------------------------------------------------
results <- XML::xmlTreeParse(raw_results, useInternalNodes = TRUE)
output <- data.frame(stringsAsFactors = FALSE,
uid = XML::xpathSApply(results, "/eSummaryResult//DocSum/Id", XML::xmlValue),
name = XML::xpathSApply(results, "/eSummaryResult//DocSum/Item[@Name='ScientificName']",
XML::xmlValue),
rank = XML::xpathSApply(results, "/eSummaryResult//DocSum/Item[@Name='Rank']", XML::xmlValue)
)
output$rank[output$rank == ''] <- "no rank"
Sys.sleep(0.34) # NCBI limits requests to three per second
return(output)
}
ncbi_children(name="Satyrium")
